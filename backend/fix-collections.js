import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

async function fixCollections() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');

    const db = mongoose.connection.db;
    
    // Listar cole√ß√µes atuais
    const collections = await db.listCollections().toArray();
    console.log('\nüìã Cole√ß√µes atuais:');
    collections.forEach(col => console.log(`  - ${col.name}`));

    // Renomear cole√ß√µes se necess√°rio
    const renames = [
      { from: 'orders', to: 'pedidos' },
      { from: 'admins', to: 'administradores' },
      { from: 'coupons', to: 'cupons' },
      { from: 'products', to: 'produtos' }
    ];

    console.log('\nüîÑ Renomeando cole√ß√µes...');
    
    for (const rename of renames) {
      const exists = collections.find(c => c.name === rename.from);
      if (exists) {
        try {
          await db.collection(rename.from).rename(rename.to);
          console.log(`  ‚úÖ ${rename.from} ‚Üí ${rename.to}`);
        } catch (error) {
          if (error.code === 48) {
            console.log(`  ‚ö†Ô∏è  ${rename.to} j√° existe`);
          } else {
            console.log(`  ‚ùå Erro ao renomear ${rename.from}: ${error.message}`);
          }
        }
      } else {
        console.log(`  ‚è≠Ô∏è  ${rename.from} n√£o existe`);
      }
    }

    // Listar cole√ß√µes finais
    const finalCollections = await db.listCollections().toArray();
    console.log('\nüìã Cole√ß√µes ap√≥s renomear:');
    finalCollections.forEach(col => console.log(`  - ${col.name}`));

    // Limpar cole√ß√£o de produtos (j√° que √© est√°tica agora)
    console.log('\nüóëÔ∏è  Removendo produtos do banco (agora est√°tico no frontend)...');
    const produtosCol = finalCollections.find(c => c.name === 'produtos');
    if (produtosCol) {
      const count = await db.collection('produtos').countDocuments();
      await db.collection('produtos').deleteMany({});
      console.log(`  ‚úÖ ${count} produtos removidos (cat√°logo agora √© est√°tico)`);
    }

    console.log('\n‚úÖ Otimiza√ß√£o conclu√≠da!');
    console.log('\n‚ÑπÔ∏è  Cole√ß√µes ativas para MongoDB free tier:');
    console.log('  - pedidos (orders)');
    console.log('  - administradores (admins)');
    console.log('  - cupons (coupons)');
    console.log('\n‚ÑπÔ∏è  Produtos agora s√£o est√°ticos no frontend');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Desconectado do MongoDB');
  }
}

fixCollections();
